Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> PROGRAMA
Rule 1     PROGRAMA -> DECLARACOES PRINCIPAL
Rule 2     PRINCIPAL -> BEGIN COMANDO LISTA_COM END
Rule 3     DECLARACOES -> DEF_CONST DEF_TIPOS DEF_VAR DEF_FUNC
Rule 4     DEF_CONST -> CONSTANTE DEF_CONST
Rule 5     DEF_CONST -> empty
Rule 6     DEF_TIPOS -> TIPO DEF_TIPOS
Rule 7     DEF_TIPOS -> empty
Rule 8     DEF_VAR -> VARIAVEL DEF_VAR
Rule 9     DEF_VAR -> empty
Rule 10    DEF_FUNC -> FUNCAO DEF_FUNC
Rule 11    DEF_FUNC -> empty
Rule 12    CONSTANTE -> CONST ID EQUAL CONST_VALOR SEMICOLON
Rule 13    CONST_VALOR -> VSTRING
Rule 14    CONST_VALOR -> EXP_MAT
Rule 15    TIPO -> TYPE ID EQUAL TIPO_DADO SEMICOLON
Rule 16    VARIAVEL -> VAR ID LISTA_ID COLON TIPO_DADO SEMICOLON
Rule 17    LISTA_ID -> COMMA ID LISTA_ID
Rule 18    LISTA_ID -> empty
Rule 19    CAMPOS -> ID COLON TIPO_DADO LISTA_CAMPOS
Rule 20    LISTA_CAMPOS -> SEMICOLON CAMPOS LISTA_CAMPOS
Rule 21    LISTA_CAMPOS -> empty
Rule 22    TIPO_DADO -> INTEGER
Rule 23    TIPO_DADO -> REAL
Rule 24    TIPO_DADO -> ARRAY LBRACKETS NUMERO RBRACKETS OF TIPO_DADO
Rule 25    TIPO_DADO -> RECORD CAMPOS END
Rule 26    TIPO_DADO -> ID
Rule 27    FUNCAO -> FUNCTION NOME_FUNCAO BLOCO_FUNCAO
Rule 28    NOME_FUNCAO -> ID PARAM_FUNC COLON TIPO_DADO
Rule 29    PARAM_FUNC -> LPAREN CAMPOS RPAREN
Rule 30    PARAM_FUNC -> empty
Rule 31    BLOCO_FUNCAO -> DEF_VAR BEGIN COMANDO LISTA_COM END
Rule 32    LISTA_COM -> SEMICOLON COMANDO LISTA_COM
Rule 33    LISTA_COM -> empty
Rule 34    BLOCO -> BEGIN COMANDO LISTA_COM END
Rule 35    BLOCO -> COMANDO
Rule 36    COMANDO -> ID NOME ASSIGN EXP_MAT
Rule 37    COMANDO -> WHILE EXP_LOGICA BLOCO
Rule 38    COMANDO -> IF EXP_LOGICA THEN BLOCO SIN_ELSE
Rule 39    COMANDO -> WRITE CONST_VALOR
Rule 40    COMANDO -> READ ID NOME
Rule 41    SIN_ELSE -> ELSE BLOCO
Rule 42    SIN_ELSE -> empty
Rule 43    LISTA_PARAM -> PARAMETRO COMMA LISTA_PARAM
Rule 44    LISTA_PARAM -> PARAMETRO
Rule 45    LISTA_PARAM -> empty
Rule 46    EXP_LOGICA -> EXP_MAT OP_LOGICO EXP_LOGICA
Rule 47    EXP_LOGICA -> EXP_MAT
Rule 48    EXP_MAT -> PARAMETRO OP_MAT EXP_MAT
Rule 49    EXP_MAT -> PARAMETRO
Rule 50    PARAMETRO -> ID NOME
Rule 51    PARAMETRO -> NUMERO
Rule 52    OP_LOGICO -> GREATER
Rule 53    OP_LOGICO -> LESS
Rule 54    OP_LOGICO -> EQUAL
Rule 55    OP_LOGICO -> EXNOT
Rule 56    OP_MAT -> PLUS
Rule 57    OP_MAT -> MINUS
Rule 58    OP_MAT -> TIMES
Rule 59    OP_MAT -> DIVIDE
Rule 60    NOME -> DOT ID NOME
Rule 61    NOME -> LBRACKETS PARAMETRO RBRACKETS
Rule 62    NOME -> LPAREN LISTA_PARAM RPAREN
Rule 63    NOME -> empty
Rule 64    empty -> <empty>

Terminals, with rules where they appear

ARRAY                : 24
ASSIGN               : 36
BEGIN                : 2 31 34
COLON                : 16 19 28
COMMA                : 17 43
CONST                : 12
DIVIDE               : 59
DOT                  : 60
ELSE                 : 41
END                  : 2 25 31 34
EQUAL                : 12 15 54
EXNOT                : 55
FUNCTION             : 27
GREATER              : 52
ID                   : 12 15 16 17 19 26 28 36 40 50 60
IF                   : 38
INTEGER              : 22
LBRACKETS            : 24 61
LESS                 : 53
LPAREN               : 29 62
MINUS                : 57
NUMERO               : 24 51
OF                   : 24
PLUS                 : 56
RBRACKETS            : 24 61
READ                 : 40
REAL                 : 23
RECORD               : 25
RPAREN               : 29 62
SEMICOLON            : 12 15 16 20 32
THEN                 : 38
TIMES                : 58
TYPE                 : 15
VAR                  : 16
VSTRING              : 13
WHILE                : 37
WRITE                : 39
error                : 

Nonterminals, with rules where they appear

BLOCO                : 37 38 41
BLOCO_FUNCAO         : 27
CAMPOS               : 20 25 29
COMANDO              : 2 31 32 34 35
CONSTANTE            : 4
CONST_VALOR          : 12 39
DECLARACOES          : 1
DEF_CONST            : 3 4
DEF_FUNC             : 3 10
DEF_TIPOS            : 3 6
DEF_VAR              : 3 8 31
EXP_LOGICA           : 37 38 46
EXP_MAT              : 14 36 46 47 48
FUNCAO               : 10
LISTA_CAMPOS         : 19 20
LISTA_COM            : 2 31 32 34
LISTA_ID             : 16 17
LISTA_PARAM          : 43 62
NOME                 : 36 40 50 60
NOME_FUNCAO          : 27
OP_LOGICO            : 46
OP_MAT               : 48
PARAMETRO            : 43 44 48 49 61
PARAM_FUNC           : 28
PRINCIPAL            : 1
PROGRAMA             : 0
SIN_ELSE             : 38
TIPO                 : 6
TIPO_DADO            : 15 16 19 24 28
VARIAVEL             : 8
empty                : 5 7 9 11 18 21 30 33 42 45 63

Parsing method: LALR

state 0

    (0) S' -> . PROGRAMA
    (1) PROGRAMA -> . DECLARACOES PRINCIPAL
    (3) DECLARACOES -> . DEF_CONST DEF_TIPOS DEF_VAR DEF_FUNC
    (4) DEF_CONST -> . CONSTANTE DEF_CONST
    (5) DEF_CONST -> . empty
    (12) CONSTANTE -> . CONST ID EQUAL CONST_VALOR SEMICOLON
    (64) empty -> .

    CONST           shift and go to state 6
    TYPE            reduce using rule 64 (empty -> .)
    VAR             reduce using rule 64 (empty -> .)
    FUNCTION        reduce using rule 64 (empty -> .)
    BEGIN           reduce using rule 64 (empty -> .)

    PROGRAMA                       shift and go to state 1
    DECLARACOES                    shift and go to state 2
    DEF_CONST                      shift and go to state 3
    CONSTANTE                      shift and go to state 4
    empty                          shift and go to state 5

state 1

    (0) S' -> PROGRAMA .



state 2

    (1) PROGRAMA -> DECLARACOES . PRINCIPAL
    (2) PRINCIPAL -> . BEGIN COMANDO LISTA_COM END

    BEGIN           shift and go to state 8

    PRINCIPAL                      shift and go to state 7

state 3

    (3) DECLARACOES -> DEF_CONST . DEF_TIPOS DEF_VAR DEF_FUNC
    (6) DEF_TIPOS -> . TIPO DEF_TIPOS
    (7) DEF_TIPOS -> . empty
    (15) TIPO -> . TYPE ID EQUAL TIPO_DADO SEMICOLON
    (64) empty -> .

    TYPE            shift and go to state 12
    VAR             reduce using rule 64 (empty -> .)
    FUNCTION        reduce using rule 64 (empty -> .)
    BEGIN           reduce using rule 64 (empty -> .)

    DEF_TIPOS                      shift and go to state 9
    TIPO                           shift and go to state 10
    empty                          shift and go to state 11

state 4

    (4) DEF_CONST -> CONSTANTE . DEF_CONST
    (4) DEF_CONST -> . CONSTANTE DEF_CONST
    (5) DEF_CONST -> . empty
    (12) CONSTANTE -> . CONST ID EQUAL CONST_VALOR SEMICOLON
    (64) empty -> .

    CONST           shift and go to state 6
    TYPE            reduce using rule 64 (empty -> .)
    VAR             reduce using rule 64 (empty -> .)
    FUNCTION        reduce using rule 64 (empty -> .)
    BEGIN           reduce using rule 64 (empty -> .)

    CONSTANTE                      shift and go to state 4
    DEF_CONST                      shift and go to state 13
    empty                          shift and go to state 5

state 5

    (5) DEF_CONST -> empty .

    TYPE            reduce using rule 5 (DEF_CONST -> empty .)
    VAR             reduce using rule 5 (DEF_CONST -> empty .)
    FUNCTION        reduce using rule 5 (DEF_CONST -> empty .)
    BEGIN           reduce using rule 5 (DEF_CONST -> empty .)


state 6

    (12) CONSTANTE -> CONST . ID EQUAL CONST_VALOR SEMICOLON

    ID              shift and go to state 14


state 7

    (1) PROGRAMA -> DECLARACOES PRINCIPAL .

    $end            reduce using rule 1 (PROGRAMA -> DECLARACOES PRINCIPAL .)


state 8

    (2) PRINCIPAL -> BEGIN . COMANDO LISTA_COM END
    (36) COMANDO -> . ID NOME ASSIGN EXP_MAT
    (37) COMANDO -> . WHILE EXP_LOGICA BLOCO
    (38) COMANDO -> . IF EXP_LOGICA THEN BLOCO SIN_ELSE
    (39) COMANDO -> . WRITE CONST_VALOR
    (40) COMANDO -> . READ ID NOME

    ID              shift and go to state 16
    WHILE           shift and go to state 17
    IF              shift and go to state 18
    WRITE           shift and go to state 19
    READ            shift and go to state 20

    COMANDO                        shift and go to state 15

state 9

    (3) DECLARACOES -> DEF_CONST DEF_TIPOS . DEF_VAR DEF_FUNC
    (8) DEF_VAR -> . VARIAVEL DEF_VAR
    (9) DEF_VAR -> . empty
    (16) VARIAVEL -> . VAR ID LISTA_ID COLON TIPO_DADO SEMICOLON
    (64) empty -> .

    VAR             shift and go to state 24
    FUNCTION        reduce using rule 64 (empty -> .)
    BEGIN           reduce using rule 64 (empty -> .)

    DEF_VAR                        shift and go to state 21
    VARIAVEL                       shift and go to state 22
    empty                          shift and go to state 23

state 10

    (6) DEF_TIPOS -> TIPO . DEF_TIPOS
    (6) DEF_TIPOS -> . TIPO DEF_TIPOS
    (7) DEF_TIPOS -> . empty
    (15) TIPO -> . TYPE ID EQUAL TIPO_DADO SEMICOLON
    (64) empty -> .

    TYPE            shift and go to state 12
    VAR             reduce using rule 64 (empty -> .)
    FUNCTION        reduce using rule 64 (empty -> .)
    BEGIN           reduce using rule 64 (empty -> .)

    TIPO                           shift and go to state 10
    DEF_TIPOS                      shift and go to state 25
    empty                          shift and go to state 11

state 11

    (7) DEF_TIPOS -> empty .

    VAR             reduce using rule 7 (DEF_TIPOS -> empty .)
    FUNCTION        reduce using rule 7 (DEF_TIPOS -> empty .)
    BEGIN           reduce using rule 7 (DEF_TIPOS -> empty .)


state 12

    (15) TIPO -> TYPE . ID EQUAL TIPO_DADO SEMICOLON

    ID              shift and go to state 26


state 13

    (4) DEF_CONST -> CONSTANTE DEF_CONST .

    TYPE            reduce using rule 4 (DEF_CONST -> CONSTANTE DEF_CONST .)
    VAR             reduce using rule 4 (DEF_CONST -> CONSTANTE DEF_CONST .)
    FUNCTION        reduce using rule 4 (DEF_CONST -> CONSTANTE DEF_CONST .)
    BEGIN           reduce using rule 4 (DEF_CONST -> CONSTANTE DEF_CONST .)


state 14

    (12) CONSTANTE -> CONST ID . EQUAL CONST_VALOR SEMICOLON

    EQUAL           shift and go to state 27


state 15

    (2) PRINCIPAL -> BEGIN COMANDO . LISTA_COM END
    (32) LISTA_COM -> . SEMICOLON COMANDO LISTA_COM
    (33) LISTA_COM -> . empty
    (64) empty -> .

    SEMICOLON       shift and go to state 29
    END             reduce using rule 64 (empty -> .)

    LISTA_COM                      shift and go to state 28
    empty                          shift and go to state 30

state 16

    (36) COMANDO -> ID . NOME ASSIGN EXP_MAT
    (60) NOME -> . DOT ID NOME
    (61) NOME -> . LBRACKETS PARAMETRO RBRACKETS
    (62) NOME -> . LPAREN LISTA_PARAM RPAREN
    (63) NOME -> . empty
    (64) empty -> .

    DOT             shift and go to state 32
    LBRACKETS       shift and go to state 33
    LPAREN          shift and go to state 34
    ASSIGN          reduce using rule 64 (empty -> .)

    NOME                           shift and go to state 31
    empty                          shift and go to state 35

state 17

    (37) COMANDO -> WHILE . EXP_LOGICA BLOCO
    (46) EXP_LOGICA -> . EXP_MAT OP_LOGICO EXP_LOGICA
    (47) EXP_LOGICA -> . EXP_MAT
    (48) EXP_MAT -> . PARAMETRO OP_MAT EXP_MAT
    (49) EXP_MAT -> . PARAMETRO
    (50) PARAMETRO -> . ID NOME
    (51) PARAMETRO -> . NUMERO

    ID              shift and go to state 39
    NUMERO          shift and go to state 40

    EXP_LOGICA                     shift and go to state 36
    EXP_MAT                        shift and go to state 37
    PARAMETRO                      shift and go to state 38

state 18

    (38) COMANDO -> IF . EXP_LOGICA THEN BLOCO SIN_ELSE
    (46) EXP_LOGICA -> . EXP_MAT OP_LOGICO EXP_LOGICA
    (47) EXP_LOGICA -> . EXP_MAT
    (48) EXP_MAT -> . PARAMETRO OP_MAT EXP_MAT
    (49) EXP_MAT -> . PARAMETRO
    (50) PARAMETRO -> . ID NOME
    (51) PARAMETRO -> . NUMERO

    ID              shift and go to state 39
    NUMERO          shift and go to state 40

    EXP_LOGICA                     shift and go to state 41
    EXP_MAT                        shift and go to state 37
    PARAMETRO                      shift and go to state 38

state 19

    (39) COMANDO -> WRITE . CONST_VALOR
    (13) CONST_VALOR -> . VSTRING
    (14) CONST_VALOR -> . EXP_MAT
    (48) EXP_MAT -> . PARAMETRO OP_MAT EXP_MAT
    (49) EXP_MAT -> . PARAMETRO
    (50) PARAMETRO -> . ID NOME
    (51) PARAMETRO -> . NUMERO

    VSTRING         shift and go to state 43
    ID              shift and go to state 39
    NUMERO          shift and go to state 40

    CONST_VALOR                    shift and go to state 42
    EXP_MAT                        shift and go to state 44
    PARAMETRO                      shift and go to state 38

state 20

    (40) COMANDO -> READ . ID NOME

    ID              shift and go to state 45


state 21

    (3) DECLARACOES -> DEF_CONST DEF_TIPOS DEF_VAR . DEF_FUNC
    (10) DEF_FUNC -> . FUNCAO DEF_FUNC
    (11) DEF_FUNC -> . empty
    (27) FUNCAO -> . FUNCTION NOME_FUNCAO BLOCO_FUNCAO
    (64) empty -> .

    FUNCTION        shift and go to state 49
    BEGIN           reduce using rule 64 (empty -> .)

    DEF_FUNC                       shift and go to state 46
    FUNCAO                         shift and go to state 47
    empty                          shift and go to state 48

state 22

    (8) DEF_VAR -> VARIAVEL . DEF_VAR
    (8) DEF_VAR -> . VARIAVEL DEF_VAR
    (9) DEF_VAR -> . empty
    (16) VARIAVEL -> . VAR ID LISTA_ID COLON TIPO_DADO SEMICOLON
    (64) empty -> .

    VAR             shift and go to state 24
    FUNCTION        reduce using rule 64 (empty -> .)
    BEGIN           reduce using rule 64 (empty -> .)

    VARIAVEL                       shift and go to state 22
    DEF_VAR                        shift and go to state 50
    empty                          shift and go to state 23

state 23

    (9) DEF_VAR -> empty .

    FUNCTION        reduce using rule 9 (DEF_VAR -> empty .)
    BEGIN           reduce using rule 9 (DEF_VAR -> empty .)


state 24

    (16) VARIAVEL -> VAR . ID LISTA_ID COLON TIPO_DADO SEMICOLON

    ID              shift and go to state 51


state 25

    (6) DEF_TIPOS -> TIPO DEF_TIPOS .

    VAR             reduce using rule 6 (DEF_TIPOS -> TIPO DEF_TIPOS .)
    FUNCTION        reduce using rule 6 (DEF_TIPOS -> TIPO DEF_TIPOS .)
    BEGIN           reduce using rule 6 (DEF_TIPOS -> TIPO DEF_TIPOS .)


state 26

    (15) TIPO -> TYPE ID . EQUAL TIPO_DADO SEMICOLON

    EQUAL           shift and go to state 52


state 27

    (12) CONSTANTE -> CONST ID EQUAL . CONST_VALOR SEMICOLON
    (13) CONST_VALOR -> . VSTRING
    (14) CONST_VALOR -> . EXP_MAT
    (48) EXP_MAT -> . PARAMETRO OP_MAT EXP_MAT
    (49) EXP_MAT -> . PARAMETRO
    (50) PARAMETRO -> . ID NOME
    (51) PARAMETRO -> . NUMERO

    VSTRING         shift and go to state 43
    ID              shift and go to state 39
    NUMERO          shift and go to state 40

    CONST_VALOR                    shift and go to state 53
    EXP_MAT                        shift and go to state 44
    PARAMETRO                      shift and go to state 38

state 28

    (2) PRINCIPAL -> BEGIN COMANDO LISTA_COM . END

    END             shift and go to state 54


state 29

    (32) LISTA_COM -> SEMICOLON . COMANDO LISTA_COM
    (36) COMANDO -> . ID NOME ASSIGN EXP_MAT
    (37) COMANDO -> . WHILE EXP_LOGICA BLOCO
    (38) COMANDO -> . IF EXP_LOGICA THEN BLOCO SIN_ELSE
    (39) COMANDO -> . WRITE CONST_VALOR
    (40) COMANDO -> . READ ID NOME

    ID              shift and go to state 16
    WHILE           shift and go to state 17
    IF              shift and go to state 18
    WRITE           shift and go to state 19
    READ            shift and go to state 20

    COMANDO                        shift and go to state 55

state 30

    (33) LISTA_COM -> empty .

    END             reduce using rule 33 (LISTA_COM -> empty .)


state 31

    (36) COMANDO -> ID NOME . ASSIGN EXP_MAT

    ASSIGN          shift and go to state 56


state 32

    (60) NOME -> DOT . ID NOME

    ID              shift and go to state 57


state 33

    (61) NOME -> LBRACKETS . PARAMETRO RBRACKETS
    (50) PARAMETRO -> . ID NOME
    (51) PARAMETRO -> . NUMERO

    ID              shift and go to state 39
    NUMERO          shift and go to state 40

    PARAMETRO                      shift and go to state 58

state 34

    (62) NOME -> LPAREN . LISTA_PARAM RPAREN
    (43) LISTA_PARAM -> . PARAMETRO COMMA LISTA_PARAM
    (44) LISTA_PARAM -> . PARAMETRO
    (45) LISTA_PARAM -> . empty
    (50) PARAMETRO -> . ID NOME
    (51) PARAMETRO -> . NUMERO
    (64) empty -> .

    ID              shift and go to state 39
    NUMERO          shift and go to state 40
    RPAREN          reduce using rule 64 (empty -> .)

    LISTA_PARAM                    shift and go to state 59
    PARAMETRO                      shift and go to state 60
    empty                          shift and go to state 61

state 35

    (63) NOME -> empty .

    ASSIGN          reduce using rule 63 (NOME -> empty .)
    PLUS            reduce using rule 63 (NOME -> empty .)
    MINUS           reduce using rule 63 (NOME -> empty .)
    TIMES           reduce using rule 63 (NOME -> empty .)
    DIVIDE          reduce using rule 63 (NOME -> empty .)
    GREATER         reduce using rule 63 (NOME -> empty .)
    LESS            reduce using rule 63 (NOME -> empty .)
    EQUAL           reduce using rule 63 (NOME -> empty .)
    EXNOT           reduce using rule 63 (NOME -> empty .)
    BEGIN           reduce using rule 63 (NOME -> empty .)
    ID              reduce using rule 63 (NOME -> empty .)
    WHILE           reduce using rule 63 (NOME -> empty .)
    IF              reduce using rule 63 (NOME -> empty .)
    WRITE           reduce using rule 63 (NOME -> empty .)
    READ            reduce using rule 63 (NOME -> empty .)
    THEN            reduce using rule 63 (NOME -> empty .)
    SEMICOLON       reduce using rule 63 (NOME -> empty .)
    END             reduce using rule 63 (NOME -> empty .)
    ELSE            reduce using rule 63 (NOME -> empty .)
    RBRACKETS       reduce using rule 63 (NOME -> empty .)
    COMMA           reduce using rule 63 (NOME -> empty .)
    RPAREN          reduce using rule 63 (NOME -> empty .)


state 36

    (37) COMANDO -> WHILE EXP_LOGICA . BLOCO
    (34) BLOCO -> . BEGIN COMANDO LISTA_COM END
    (35) BLOCO -> . COMANDO
    (36) COMANDO -> . ID NOME ASSIGN EXP_MAT
    (37) COMANDO -> . WHILE EXP_LOGICA BLOCO
    (38) COMANDO -> . IF EXP_LOGICA THEN BLOCO SIN_ELSE
    (39) COMANDO -> . WRITE CONST_VALOR
    (40) COMANDO -> . READ ID NOME

    BEGIN           shift and go to state 63
    ID              shift and go to state 16
    WHILE           shift and go to state 17
    IF              shift and go to state 18
    WRITE           shift and go to state 19
    READ            shift and go to state 20

    BLOCO                          shift and go to state 62
    COMANDO                        shift and go to state 64

state 37

    (46) EXP_LOGICA -> EXP_MAT . OP_LOGICO EXP_LOGICA
    (47) EXP_LOGICA -> EXP_MAT .
    (52) OP_LOGICO -> . GREATER
    (53) OP_LOGICO -> . LESS
    (54) OP_LOGICO -> . EQUAL
    (55) OP_LOGICO -> . EXNOT

    BEGIN           reduce using rule 47 (EXP_LOGICA -> EXP_MAT .)
    ID              reduce using rule 47 (EXP_LOGICA -> EXP_MAT .)
    WHILE           reduce using rule 47 (EXP_LOGICA -> EXP_MAT .)
    IF              reduce using rule 47 (EXP_LOGICA -> EXP_MAT .)
    WRITE           reduce using rule 47 (EXP_LOGICA -> EXP_MAT .)
    READ            reduce using rule 47 (EXP_LOGICA -> EXP_MAT .)
    THEN            reduce using rule 47 (EXP_LOGICA -> EXP_MAT .)
    GREATER         shift and go to state 66
    LESS            shift and go to state 67
    EQUAL           shift and go to state 68
    EXNOT           shift and go to state 69

    OP_LOGICO                      shift and go to state 65

state 38

    (48) EXP_MAT -> PARAMETRO . OP_MAT EXP_MAT
    (49) EXP_MAT -> PARAMETRO .
    (56) OP_MAT -> . PLUS
    (57) OP_MAT -> . MINUS
    (58) OP_MAT -> . TIMES
    (59) OP_MAT -> . DIVIDE

    GREATER         reduce using rule 49 (EXP_MAT -> PARAMETRO .)
    LESS            reduce using rule 49 (EXP_MAT -> PARAMETRO .)
    EQUAL           reduce using rule 49 (EXP_MAT -> PARAMETRO .)
    EXNOT           reduce using rule 49 (EXP_MAT -> PARAMETRO .)
    BEGIN           reduce using rule 49 (EXP_MAT -> PARAMETRO .)
    ID              reduce using rule 49 (EXP_MAT -> PARAMETRO .)
    WHILE           reduce using rule 49 (EXP_MAT -> PARAMETRO .)
    IF              reduce using rule 49 (EXP_MAT -> PARAMETRO .)
    WRITE           reduce using rule 49 (EXP_MAT -> PARAMETRO .)
    READ            reduce using rule 49 (EXP_MAT -> PARAMETRO .)
    THEN            reduce using rule 49 (EXP_MAT -> PARAMETRO .)
    SEMICOLON       reduce using rule 49 (EXP_MAT -> PARAMETRO .)
    END             reduce using rule 49 (EXP_MAT -> PARAMETRO .)
    ELSE            reduce using rule 49 (EXP_MAT -> PARAMETRO .)
    PLUS            shift and go to state 71
    MINUS           shift and go to state 72
    TIMES           shift and go to state 73
    DIVIDE          shift and go to state 74

    OP_MAT                         shift and go to state 70

state 39

    (50) PARAMETRO -> ID . NOME
    (60) NOME -> . DOT ID NOME
    (61) NOME -> . LBRACKETS PARAMETRO RBRACKETS
    (62) NOME -> . LPAREN LISTA_PARAM RPAREN
    (63) NOME -> . empty
    (64) empty -> .

    DOT             shift and go to state 32
    LBRACKETS       shift and go to state 33
    LPAREN          shift and go to state 34
    PLUS            reduce using rule 64 (empty -> .)
    MINUS           reduce using rule 64 (empty -> .)
    TIMES           reduce using rule 64 (empty -> .)
    DIVIDE          reduce using rule 64 (empty -> .)
    GREATER         reduce using rule 64 (empty -> .)
    LESS            reduce using rule 64 (empty -> .)
    EQUAL           reduce using rule 64 (empty -> .)
    EXNOT           reduce using rule 64 (empty -> .)
    BEGIN           reduce using rule 64 (empty -> .)
    ID              reduce using rule 64 (empty -> .)
    WHILE           reduce using rule 64 (empty -> .)
    IF              reduce using rule 64 (empty -> .)
    WRITE           reduce using rule 64 (empty -> .)
    READ            reduce using rule 64 (empty -> .)
    THEN            reduce using rule 64 (empty -> .)
    SEMICOLON       reduce using rule 64 (empty -> .)
    END             reduce using rule 64 (empty -> .)
    ELSE            reduce using rule 64 (empty -> .)
    RBRACKETS       reduce using rule 64 (empty -> .)
    COMMA           reduce using rule 64 (empty -> .)
    RPAREN          reduce using rule 64 (empty -> .)

    NOME                           shift and go to state 75
    empty                          shift and go to state 35

state 40

    (51) PARAMETRO -> NUMERO .

    PLUS            reduce using rule 51 (PARAMETRO -> NUMERO .)
    MINUS           reduce using rule 51 (PARAMETRO -> NUMERO .)
    TIMES           reduce using rule 51 (PARAMETRO -> NUMERO .)
    DIVIDE          reduce using rule 51 (PARAMETRO -> NUMERO .)
    GREATER         reduce using rule 51 (PARAMETRO -> NUMERO .)
    LESS            reduce using rule 51 (PARAMETRO -> NUMERO .)
    EQUAL           reduce using rule 51 (PARAMETRO -> NUMERO .)
    EXNOT           reduce using rule 51 (PARAMETRO -> NUMERO .)
    BEGIN           reduce using rule 51 (PARAMETRO -> NUMERO .)
    ID              reduce using rule 51 (PARAMETRO -> NUMERO .)
    WHILE           reduce using rule 51 (PARAMETRO -> NUMERO .)
    IF              reduce using rule 51 (PARAMETRO -> NUMERO .)
    WRITE           reduce using rule 51 (PARAMETRO -> NUMERO .)
    READ            reduce using rule 51 (PARAMETRO -> NUMERO .)
    THEN            reduce using rule 51 (PARAMETRO -> NUMERO .)
    SEMICOLON       reduce using rule 51 (PARAMETRO -> NUMERO .)
    END             reduce using rule 51 (PARAMETRO -> NUMERO .)
    ELSE            reduce using rule 51 (PARAMETRO -> NUMERO .)
    RBRACKETS       reduce using rule 51 (PARAMETRO -> NUMERO .)
    COMMA           reduce using rule 51 (PARAMETRO -> NUMERO .)
    RPAREN          reduce using rule 51 (PARAMETRO -> NUMERO .)


state 41

    (38) COMANDO -> IF EXP_LOGICA . THEN BLOCO SIN_ELSE

    THEN            shift and go to state 76


state 42

    (39) COMANDO -> WRITE CONST_VALOR .

    SEMICOLON       reduce using rule 39 (COMANDO -> WRITE CONST_VALOR .)
    END             reduce using rule 39 (COMANDO -> WRITE CONST_VALOR .)
    ELSE            reduce using rule 39 (COMANDO -> WRITE CONST_VALOR .)


state 43

    (13) CONST_VALOR -> VSTRING .

    SEMICOLON       reduce using rule 13 (CONST_VALOR -> VSTRING .)
    END             reduce using rule 13 (CONST_VALOR -> VSTRING .)
    ELSE            reduce using rule 13 (CONST_VALOR -> VSTRING .)


state 44

    (14) CONST_VALOR -> EXP_MAT .

    SEMICOLON       reduce using rule 14 (CONST_VALOR -> EXP_MAT .)
    END             reduce using rule 14 (CONST_VALOR -> EXP_MAT .)
    ELSE            reduce using rule 14 (CONST_VALOR -> EXP_MAT .)


state 45

    (40) COMANDO -> READ ID . NOME
    (60) NOME -> . DOT ID NOME
    (61) NOME -> . LBRACKETS PARAMETRO RBRACKETS
    (62) NOME -> . LPAREN LISTA_PARAM RPAREN
    (63) NOME -> . empty
    (64) empty -> .

    DOT             shift and go to state 32
    LBRACKETS       shift and go to state 33
    LPAREN          shift and go to state 34
    SEMICOLON       reduce using rule 64 (empty -> .)
    END             reduce using rule 64 (empty -> .)
    ELSE            reduce using rule 64 (empty -> .)

    NOME                           shift and go to state 77
    empty                          shift and go to state 35

state 46

    (3) DECLARACOES -> DEF_CONST DEF_TIPOS DEF_VAR DEF_FUNC .

    BEGIN           reduce using rule 3 (DECLARACOES -> DEF_CONST DEF_TIPOS DEF_VAR DEF_FUNC .)


state 47

    (10) DEF_FUNC -> FUNCAO . DEF_FUNC
    (10) DEF_FUNC -> . FUNCAO DEF_FUNC
    (11) DEF_FUNC -> . empty
    (27) FUNCAO -> . FUNCTION NOME_FUNCAO BLOCO_FUNCAO
    (64) empty -> .

    FUNCTION        shift and go to state 49
    BEGIN           reduce using rule 64 (empty -> .)

    FUNCAO                         shift and go to state 47
    DEF_FUNC                       shift and go to state 78
    empty                          shift and go to state 48

state 48

    (11) DEF_FUNC -> empty .

    BEGIN           reduce using rule 11 (DEF_FUNC -> empty .)


state 49

    (27) FUNCAO -> FUNCTION . NOME_FUNCAO BLOCO_FUNCAO
    (28) NOME_FUNCAO -> . ID PARAM_FUNC COLON TIPO_DADO

    ID              shift and go to state 80

    NOME_FUNCAO                    shift and go to state 79

state 50

    (8) DEF_VAR -> VARIAVEL DEF_VAR .

    FUNCTION        reduce using rule 8 (DEF_VAR -> VARIAVEL DEF_VAR .)
    BEGIN           reduce using rule 8 (DEF_VAR -> VARIAVEL DEF_VAR .)


state 51

    (16) VARIAVEL -> VAR ID . LISTA_ID COLON TIPO_DADO SEMICOLON
    (17) LISTA_ID -> . COMMA ID LISTA_ID
    (18) LISTA_ID -> . empty
    (64) empty -> .

    COMMA           shift and go to state 82
    COLON           reduce using rule 64 (empty -> .)

    LISTA_ID                       shift and go to state 81
    empty                          shift and go to state 83

state 52

    (15) TIPO -> TYPE ID EQUAL . TIPO_DADO SEMICOLON
    (22) TIPO_DADO -> . INTEGER
    (23) TIPO_DADO -> . REAL
    (24) TIPO_DADO -> . ARRAY LBRACKETS NUMERO RBRACKETS OF TIPO_DADO
    (25) TIPO_DADO -> . RECORD CAMPOS END
    (26) TIPO_DADO -> . ID

    INTEGER         shift and go to state 86
    REAL            shift and go to state 87
    ARRAY           shift and go to state 88
    RECORD          shift and go to state 89
    ID              shift and go to state 84

    TIPO_DADO                      shift and go to state 85

state 53

    (12) CONSTANTE -> CONST ID EQUAL CONST_VALOR . SEMICOLON

    SEMICOLON       shift and go to state 90


state 54

    (2) PRINCIPAL -> BEGIN COMANDO LISTA_COM END .

    $end            reduce using rule 2 (PRINCIPAL -> BEGIN COMANDO LISTA_COM END .)


state 55

    (32) LISTA_COM -> SEMICOLON COMANDO . LISTA_COM
    (32) LISTA_COM -> . SEMICOLON COMANDO LISTA_COM
    (33) LISTA_COM -> . empty
    (64) empty -> .

    SEMICOLON       shift and go to state 29
    END             reduce using rule 64 (empty -> .)

    LISTA_COM                      shift and go to state 91
    empty                          shift and go to state 30

state 56

    (36) COMANDO -> ID NOME ASSIGN . EXP_MAT
    (48) EXP_MAT -> . PARAMETRO OP_MAT EXP_MAT
    (49) EXP_MAT -> . PARAMETRO
    (50) PARAMETRO -> . ID NOME
    (51) PARAMETRO -> . NUMERO

    ID              shift and go to state 39
    NUMERO          shift and go to state 40

    EXP_MAT                        shift and go to state 92
    PARAMETRO                      shift and go to state 38

state 57

    (60) NOME -> DOT ID . NOME
    (60) NOME -> . DOT ID NOME
    (61) NOME -> . LBRACKETS PARAMETRO RBRACKETS
    (62) NOME -> . LPAREN LISTA_PARAM RPAREN
    (63) NOME -> . empty
    (64) empty -> .

    DOT             shift and go to state 32
    LBRACKETS       shift and go to state 33
    LPAREN          shift and go to state 34
    ASSIGN          reduce using rule 64 (empty -> .)
    PLUS            reduce using rule 64 (empty -> .)
    MINUS           reduce using rule 64 (empty -> .)
    TIMES           reduce using rule 64 (empty -> .)
    DIVIDE          reduce using rule 64 (empty -> .)
    GREATER         reduce using rule 64 (empty -> .)
    LESS            reduce using rule 64 (empty -> .)
    EQUAL           reduce using rule 64 (empty -> .)
    EXNOT           reduce using rule 64 (empty -> .)
    BEGIN           reduce using rule 64 (empty -> .)
    ID              reduce using rule 64 (empty -> .)
    WHILE           reduce using rule 64 (empty -> .)
    IF              reduce using rule 64 (empty -> .)
    WRITE           reduce using rule 64 (empty -> .)
    READ            reduce using rule 64 (empty -> .)
    THEN            reduce using rule 64 (empty -> .)
    SEMICOLON       reduce using rule 64 (empty -> .)
    END             reduce using rule 64 (empty -> .)
    ELSE            reduce using rule 64 (empty -> .)
    RBRACKETS       reduce using rule 64 (empty -> .)
    COMMA           reduce using rule 64 (empty -> .)
    RPAREN          reduce using rule 64 (empty -> .)

    NOME                           shift and go to state 93
    empty                          shift and go to state 35

state 58

    (61) NOME -> LBRACKETS PARAMETRO . RBRACKETS

    RBRACKETS       shift and go to state 94


state 59

    (62) NOME -> LPAREN LISTA_PARAM . RPAREN

    RPAREN          shift and go to state 95


state 60

    (43) LISTA_PARAM -> PARAMETRO . COMMA LISTA_PARAM
    (44) LISTA_PARAM -> PARAMETRO .

    COMMA           shift and go to state 96
    RPAREN          reduce using rule 44 (LISTA_PARAM -> PARAMETRO .)


state 61

    (45) LISTA_PARAM -> empty .

    RPAREN          reduce using rule 45 (LISTA_PARAM -> empty .)


state 62

    (37) COMANDO -> WHILE EXP_LOGICA BLOCO .

    SEMICOLON       reduce using rule 37 (COMANDO -> WHILE EXP_LOGICA BLOCO .)
    END             reduce using rule 37 (COMANDO -> WHILE EXP_LOGICA BLOCO .)
    ELSE            reduce using rule 37 (COMANDO -> WHILE EXP_LOGICA BLOCO .)


state 63

    (34) BLOCO -> BEGIN . COMANDO LISTA_COM END
    (36) COMANDO -> . ID NOME ASSIGN EXP_MAT
    (37) COMANDO -> . WHILE EXP_LOGICA BLOCO
    (38) COMANDO -> . IF EXP_LOGICA THEN BLOCO SIN_ELSE
    (39) COMANDO -> . WRITE CONST_VALOR
    (40) COMANDO -> . READ ID NOME

    ID              shift and go to state 16
    WHILE           shift and go to state 17
    IF              shift and go to state 18
    WRITE           shift and go to state 19
    READ            shift and go to state 20

    COMANDO                        shift and go to state 97

state 64

    (35) BLOCO -> COMANDO .

    SEMICOLON       reduce using rule 35 (BLOCO -> COMANDO .)
    END             reduce using rule 35 (BLOCO -> COMANDO .)
    ELSE            reduce using rule 35 (BLOCO -> COMANDO .)


state 65

    (46) EXP_LOGICA -> EXP_MAT OP_LOGICO . EXP_LOGICA
    (46) EXP_LOGICA -> . EXP_MAT OP_LOGICO EXP_LOGICA
    (47) EXP_LOGICA -> . EXP_MAT
    (48) EXP_MAT -> . PARAMETRO OP_MAT EXP_MAT
    (49) EXP_MAT -> . PARAMETRO
    (50) PARAMETRO -> . ID NOME
    (51) PARAMETRO -> . NUMERO

    ID              shift and go to state 39
    NUMERO          shift and go to state 40

    EXP_MAT                        shift and go to state 37
    EXP_LOGICA                     shift and go to state 98
    PARAMETRO                      shift and go to state 38

state 66

    (52) OP_LOGICO -> GREATER .

    ID              reduce using rule 52 (OP_LOGICO -> GREATER .)
    NUMERO          reduce using rule 52 (OP_LOGICO -> GREATER .)


state 67

    (53) OP_LOGICO -> LESS .

    ID              reduce using rule 53 (OP_LOGICO -> LESS .)
    NUMERO          reduce using rule 53 (OP_LOGICO -> LESS .)


state 68

    (54) OP_LOGICO -> EQUAL .

    ID              reduce using rule 54 (OP_LOGICO -> EQUAL .)
    NUMERO          reduce using rule 54 (OP_LOGICO -> EQUAL .)


state 69

    (55) OP_LOGICO -> EXNOT .

    ID              reduce using rule 55 (OP_LOGICO -> EXNOT .)
    NUMERO          reduce using rule 55 (OP_LOGICO -> EXNOT .)


state 70

    (48) EXP_MAT -> PARAMETRO OP_MAT . EXP_MAT
    (48) EXP_MAT -> . PARAMETRO OP_MAT EXP_MAT
    (49) EXP_MAT -> . PARAMETRO
    (50) PARAMETRO -> . ID NOME
    (51) PARAMETRO -> . NUMERO

    ID              shift and go to state 39
    NUMERO          shift and go to state 40

    PARAMETRO                      shift and go to state 38
    EXP_MAT                        shift and go to state 99

state 71

    (56) OP_MAT -> PLUS .

    ID              reduce using rule 56 (OP_MAT -> PLUS .)
    NUMERO          reduce using rule 56 (OP_MAT -> PLUS .)


state 72

    (57) OP_MAT -> MINUS .

    ID              reduce using rule 57 (OP_MAT -> MINUS .)
    NUMERO          reduce using rule 57 (OP_MAT -> MINUS .)


state 73

    (58) OP_MAT -> TIMES .

    ID              reduce using rule 58 (OP_MAT -> TIMES .)
    NUMERO          reduce using rule 58 (OP_MAT -> TIMES .)


state 74

    (59) OP_MAT -> DIVIDE .

    ID              reduce using rule 59 (OP_MAT -> DIVIDE .)
    NUMERO          reduce using rule 59 (OP_MAT -> DIVIDE .)


state 75

    (50) PARAMETRO -> ID NOME .

    PLUS            reduce using rule 50 (PARAMETRO -> ID NOME .)
    MINUS           reduce using rule 50 (PARAMETRO -> ID NOME .)
    TIMES           reduce using rule 50 (PARAMETRO -> ID NOME .)
    DIVIDE          reduce using rule 50 (PARAMETRO -> ID NOME .)
    GREATER         reduce using rule 50 (PARAMETRO -> ID NOME .)
    LESS            reduce using rule 50 (PARAMETRO -> ID NOME .)
    EQUAL           reduce using rule 50 (PARAMETRO -> ID NOME .)
    EXNOT           reduce using rule 50 (PARAMETRO -> ID NOME .)
    BEGIN           reduce using rule 50 (PARAMETRO -> ID NOME .)
    ID              reduce using rule 50 (PARAMETRO -> ID NOME .)
    WHILE           reduce using rule 50 (PARAMETRO -> ID NOME .)
    IF              reduce using rule 50 (PARAMETRO -> ID NOME .)
    WRITE           reduce using rule 50 (PARAMETRO -> ID NOME .)
    READ            reduce using rule 50 (PARAMETRO -> ID NOME .)
    THEN            reduce using rule 50 (PARAMETRO -> ID NOME .)
    SEMICOLON       reduce using rule 50 (PARAMETRO -> ID NOME .)
    END             reduce using rule 50 (PARAMETRO -> ID NOME .)
    ELSE            reduce using rule 50 (PARAMETRO -> ID NOME .)
    RBRACKETS       reduce using rule 50 (PARAMETRO -> ID NOME .)
    COMMA           reduce using rule 50 (PARAMETRO -> ID NOME .)
    RPAREN          reduce using rule 50 (PARAMETRO -> ID NOME .)


state 76

    (38) COMANDO -> IF EXP_LOGICA THEN . BLOCO SIN_ELSE
    (34) BLOCO -> . BEGIN COMANDO LISTA_COM END
    (35) BLOCO -> . COMANDO
    (36) COMANDO -> . ID NOME ASSIGN EXP_MAT
    (37) COMANDO -> . WHILE EXP_LOGICA BLOCO
    (38) COMANDO -> . IF EXP_LOGICA THEN BLOCO SIN_ELSE
    (39) COMANDO -> . WRITE CONST_VALOR
    (40) COMANDO -> . READ ID NOME

    BEGIN           shift and go to state 63
    ID              shift and go to state 16
    WHILE           shift and go to state 17
    IF              shift and go to state 18
    WRITE           shift and go to state 19
    READ            shift and go to state 20

    BLOCO                          shift and go to state 100
    COMANDO                        shift and go to state 64

state 77

    (40) COMANDO -> READ ID NOME .

    SEMICOLON       reduce using rule 40 (COMANDO -> READ ID NOME .)
    END             reduce using rule 40 (COMANDO -> READ ID NOME .)
    ELSE            reduce using rule 40 (COMANDO -> READ ID NOME .)


state 78

    (10) DEF_FUNC -> FUNCAO DEF_FUNC .

    BEGIN           reduce using rule 10 (DEF_FUNC -> FUNCAO DEF_FUNC .)


state 79

    (27) FUNCAO -> FUNCTION NOME_FUNCAO . BLOCO_FUNCAO
    (31) BLOCO_FUNCAO -> . DEF_VAR BEGIN COMANDO LISTA_COM END
    (8) DEF_VAR -> . VARIAVEL DEF_VAR
    (9) DEF_VAR -> . empty
    (16) VARIAVEL -> . VAR ID LISTA_ID COLON TIPO_DADO SEMICOLON
    (64) empty -> .

    VAR             shift and go to state 24
    BEGIN           reduce using rule 64 (empty -> .)

    BLOCO_FUNCAO                   shift and go to state 101
    DEF_VAR                        shift and go to state 102
    VARIAVEL                       shift and go to state 22
    empty                          shift and go to state 23

state 80

    (28) NOME_FUNCAO -> ID . PARAM_FUNC COLON TIPO_DADO
    (29) PARAM_FUNC -> . LPAREN CAMPOS RPAREN
    (30) PARAM_FUNC -> . empty
    (64) empty -> .

    LPAREN          shift and go to state 104
    COLON           reduce using rule 64 (empty -> .)

    PARAM_FUNC                     shift and go to state 103
    empty                          shift and go to state 105

state 81

    (16) VARIAVEL -> VAR ID LISTA_ID . COLON TIPO_DADO SEMICOLON

    COLON           shift and go to state 106


state 82

    (17) LISTA_ID -> COMMA . ID LISTA_ID

    ID              shift and go to state 107


state 83

    (18) LISTA_ID -> empty .

    COLON           reduce using rule 18 (LISTA_ID -> empty .)


state 84

    (26) TIPO_DADO -> ID .

    SEMICOLON       reduce using rule 26 (TIPO_DADO -> ID .)
    VAR             reduce using rule 26 (TIPO_DADO -> ID .)
    BEGIN           reduce using rule 26 (TIPO_DADO -> ID .)
    END             reduce using rule 26 (TIPO_DADO -> ID .)
    RPAREN          reduce using rule 26 (TIPO_DADO -> ID .)


state 85

    (15) TIPO -> TYPE ID EQUAL TIPO_DADO . SEMICOLON

    SEMICOLON       shift and go to state 108


state 86

    (22) TIPO_DADO -> INTEGER .

    SEMICOLON       reduce using rule 22 (TIPO_DADO -> INTEGER .)
    VAR             reduce using rule 22 (TIPO_DADO -> INTEGER .)
    BEGIN           reduce using rule 22 (TIPO_DADO -> INTEGER .)
    END             reduce using rule 22 (TIPO_DADO -> INTEGER .)
    RPAREN          reduce using rule 22 (TIPO_DADO -> INTEGER .)


state 87

    (23) TIPO_DADO -> REAL .

    SEMICOLON       reduce using rule 23 (TIPO_DADO -> REAL .)
    VAR             reduce using rule 23 (TIPO_DADO -> REAL .)
    BEGIN           reduce using rule 23 (TIPO_DADO -> REAL .)
    END             reduce using rule 23 (TIPO_DADO -> REAL .)
    RPAREN          reduce using rule 23 (TIPO_DADO -> REAL .)


state 88

    (24) TIPO_DADO -> ARRAY . LBRACKETS NUMERO RBRACKETS OF TIPO_DADO

    LBRACKETS       shift and go to state 109


state 89

    (25) TIPO_DADO -> RECORD . CAMPOS END
    (19) CAMPOS -> . ID COLON TIPO_DADO LISTA_CAMPOS

    ID              shift and go to state 111

    CAMPOS                         shift and go to state 110

state 90

    (12) CONSTANTE -> CONST ID EQUAL CONST_VALOR SEMICOLON .

    CONST           reduce using rule 12 (CONSTANTE -> CONST ID EQUAL CONST_VALOR SEMICOLON .)
    TYPE            reduce using rule 12 (CONSTANTE -> CONST ID EQUAL CONST_VALOR SEMICOLON .)
    VAR             reduce using rule 12 (CONSTANTE -> CONST ID EQUAL CONST_VALOR SEMICOLON .)
    FUNCTION        reduce using rule 12 (CONSTANTE -> CONST ID EQUAL CONST_VALOR SEMICOLON .)
    BEGIN           reduce using rule 12 (CONSTANTE -> CONST ID EQUAL CONST_VALOR SEMICOLON .)


state 91

    (32) LISTA_COM -> SEMICOLON COMANDO LISTA_COM .

    END             reduce using rule 32 (LISTA_COM -> SEMICOLON COMANDO LISTA_COM .)


state 92

    (36) COMANDO -> ID NOME ASSIGN EXP_MAT .

    SEMICOLON       reduce using rule 36 (COMANDO -> ID NOME ASSIGN EXP_MAT .)
    END             reduce using rule 36 (COMANDO -> ID NOME ASSIGN EXP_MAT .)
    ELSE            reduce using rule 36 (COMANDO -> ID NOME ASSIGN EXP_MAT .)


state 93

    (60) NOME -> DOT ID NOME .

    ASSIGN          reduce using rule 60 (NOME -> DOT ID NOME .)
    PLUS            reduce using rule 60 (NOME -> DOT ID NOME .)
    MINUS           reduce using rule 60 (NOME -> DOT ID NOME .)
    TIMES           reduce using rule 60 (NOME -> DOT ID NOME .)
    DIVIDE          reduce using rule 60 (NOME -> DOT ID NOME .)
    GREATER         reduce using rule 60 (NOME -> DOT ID NOME .)
    LESS            reduce using rule 60 (NOME -> DOT ID NOME .)
    EQUAL           reduce using rule 60 (NOME -> DOT ID NOME .)
    EXNOT           reduce using rule 60 (NOME -> DOT ID NOME .)
    BEGIN           reduce using rule 60 (NOME -> DOT ID NOME .)
    ID              reduce using rule 60 (NOME -> DOT ID NOME .)
    WHILE           reduce using rule 60 (NOME -> DOT ID NOME .)
    IF              reduce using rule 60 (NOME -> DOT ID NOME .)
    WRITE           reduce using rule 60 (NOME -> DOT ID NOME .)
    READ            reduce using rule 60 (NOME -> DOT ID NOME .)
    THEN            reduce using rule 60 (NOME -> DOT ID NOME .)
    SEMICOLON       reduce using rule 60 (NOME -> DOT ID NOME .)
    END             reduce using rule 60 (NOME -> DOT ID NOME .)
    ELSE            reduce using rule 60 (NOME -> DOT ID NOME .)
    RBRACKETS       reduce using rule 60 (NOME -> DOT ID NOME .)
    COMMA           reduce using rule 60 (NOME -> DOT ID NOME .)
    RPAREN          reduce using rule 60 (NOME -> DOT ID NOME .)


state 94

    (61) NOME -> LBRACKETS PARAMETRO RBRACKETS .

    ASSIGN          reduce using rule 61 (NOME -> LBRACKETS PARAMETRO RBRACKETS .)
    PLUS            reduce using rule 61 (NOME -> LBRACKETS PARAMETRO RBRACKETS .)
    MINUS           reduce using rule 61 (NOME -> LBRACKETS PARAMETRO RBRACKETS .)
    TIMES           reduce using rule 61 (NOME -> LBRACKETS PARAMETRO RBRACKETS .)
    DIVIDE          reduce using rule 61 (NOME -> LBRACKETS PARAMETRO RBRACKETS .)
    GREATER         reduce using rule 61 (NOME -> LBRACKETS PARAMETRO RBRACKETS .)
    LESS            reduce using rule 61 (NOME -> LBRACKETS PARAMETRO RBRACKETS .)
    EQUAL           reduce using rule 61 (NOME -> LBRACKETS PARAMETRO RBRACKETS .)
    EXNOT           reduce using rule 61 (NOME -> LBRACKETS PARAMETRO RBRACKETS .)
    BEGIN           reduce using rule 61 (NOME -> LBRACKETS PARAMETRO RBRACKETS .)
    ID              reduce using rule 61 (NOME -> LBRACKETS PARAMETRO RBRACKETS .)
    WHILE           reduce using rule 61 (NOME -> LBRACKETS PARAMETRO RBRACKETS .)
    IF              reduce using rule 61 (NOME -> LBRACKETS PARAMETRO RBRACKETS .)
    WRITE           reduce using rule 61 (NOME -> LBRACKETS PARAMETRO RBRACKETS .)
    READ            reduce using rule 61 (NOME -> LBRACKETS PARAMETRO RBRACKETS .)
    THEN            reduce using rule 61 (NOME -> LBRACKETS PARAMETRO RBRACKETS .)
    SEMICOLON       reduce using rule 61 (NOME -> LBRACKETS PARAMETRO RBRACKETS .)
    END             reduce using rule 61 (NOME -> LBRACKETS PARAMETRO RBRACKETS .)
    ELSE            reduce using rule 61 (NOME -> LBRACKETS PARAMETRO RBRACKETS .)
    RBRACKETS       reduce using rule 61 (NOME -> LBRACKETS PARAMETRO RBRACKETS .)
    COMMA           reduce using rule 61 (NOME -> LBRACKETS PARAMETRO RBRACKETS .)
    RPAREN          reduce using rule 61 (NOME -> LBRACKETS PARAMETRO RBRACKETS .)


state 95

    (62) NOME -> LPAREN LISTA_PARAM RPAREN .

    ASSIGN          reduce using rule 62 (NOME -> LPAREN LISTA_PARAM RPAREN .)
    PLUS            reduce using rule 62 (NOME -> LPAREN LISTA_PARAM RPAREN .)
    MINUS           reduce using rule 62 (NOME -> LPAREN LISTA_PARAM RPAREN .)
    TIMES           reduce using rule 62 (NOME -> LPAREN LISTA_PARAM RPAREN .)
    DIVIDE          reduce using rule 62 (NOME -> LPAREN LISTA_PARAM RPAREN .)
    GREATER         reduce using rule 62 (NOME -> LPAREN LISTA_PARAM RPAREN .)
    LESS            reduce using rule 62 (NOME -> LPAREN LISTA_PARAM RPAREN .)
    EQUAL           reduce using rule 62 (NOME -> LPAREN LISTA_PARAM RPAREN .)
    EXNOT           reduce using rule 62 (NOME -> LPAREN LISTA_PARAM RPAREN .)
    BEGIN           reduce using rule 62 (NOME -> LPAREN LISTA_PARAM RPAREN .)
    ID              reduce using rule 62 (NOME -> LPAREN LISTA_PARAM RPAREN .)
    WHILE           reduce using rule 62 (NOME -> LPAREN LISTA_PARAM RPAREN .)
    IF              reduce using rule 62 (NOME -> LPAREN LISTA_PARAM RPAREN .)
    WRITE           reduce using rule 62 (NOME -> LPAREN LISTA_PARAM RPAREN .)
    READ            reduce using rule 62 (NOME -> LPAREN LISTA_PARAM RPAREN .)
    THEN            reduce using rule 62 (NOME -> LPAREN LISTA_PARAM RPAREN .)
    SEMICOLON       reduce using rule 62 (NOME -> LPAREN LISTA_PARAM RPAREN .)
    END             reduce using rule 62 (NOME -> LPAREN LISTA_PARAM RPAREN .)
    ELSE            reduce using rule 62 (NOME -> LPAREN LISTA_PARAM RPAREN .)
    RBRACKETS       reduce using rule 62 (NOME -> LPAREN LISTA_PARAM RPAREN .)
    COMMA           reduce using rule 62 (NOME -> LPAREN LISTA_PARAM RPAREN .)
    RPAREN          reduce using rule 62 (NOME -> LPAREN LISTA_PARAM RPAREN .)


state 96

    (43) LISTA_PARAM -> PARAMETRO COMMA . LISTA_PARAM
    (43) LISTA_PARAM -> . PARAMETRO COMMA LISTA_PARAM
    (44) LISTA_PARAM -> . PARAMETRO
    (45) LISTA_PARAM -> . empty
    (50) PARAMETRO -> . ID NOME
    (51) PARAMETRO -> . NUMERO
    (64) empty -> .

    ID              shift and go to state 39
    NUMERO          shift and go to state 40
    RPAREN          reduce using rule 64 (empty -> .)

    PARAMETRO                      shift and go to state 60
    LISTA_PARAM                    shift and go to state 112
    empty                          shift and go to state 61

state 97

    (34) BLOCO -> BEGIN COMANDO . LISTA_COM END
    (32) LISTA_COM -> . SEMICOLON COMANDO LISTA_COM
    (33) LISTA_COM -> . empty
    (64) empty -> .

    SEMICOLON       shift and go to state 29
    END             reduce using rule 64 (empty -> .)

    LISTA_COM                      shift and go to state 113
    empty                          shift and go to state 30

state 98

    (46) EXP_LOGICA -> EXP_MAT OP_LOGICO EXP_LOGICA .

    BEGIN           reduce using rule 46 (EXP_LOGICA -> EXP_MAT OP_LOGICO EXP_LOGICA .)
    ID              reduce using rule 46 (EXP_LOGICA -> EXP_MAT OP_LOGICO EXP_LOGICA .)
    WHILE           reduce using rule 46 (EXP_LOGICA -> EXP_MAT OP_LOGICO EXP_LOGICA .)
    IF              reduce using rule 46 (EXP_LOGICA -> EXP_MAT OP_LOGICO EXP_LOGICA .)
    WRITE           reduce using rule 46 (EXP_LOGICA -> EXP_MAT OP_LOGICO EXP_LOGICA .)
    READ            reduce using rule 46 (EXP_LOGICA -> EXP_MAT OP_LOGICO EXP_LOGICA .)
    THEN            reduce using rule 46 (EXP_LOGICA -> EXP_MAT OP_LOGICO EXP_LOGICA .)


state 99

    (48) EXP_MAT -> PARAMETRO OP_MAT EXP_MAT .

    GREATER         reduce using rule 48 (EXP_MAT -> PARAMETRO OP_MAT EXP_MAT .)
    LESS            reduce using rule 48 (EXP_MAT -> PARAMETRO OP_MAT EXP_MAT .)
    EQUAL           reduce using rule 48 (EXP_MAT -> PARAMETRO OP_MAT EXP_MAT .)
    EXNOT           reduce using rule 48 (EXP_MAT -> PARAMETRO OP_MAT EXP_MAT .)
    BEGIN           reduce using rule 48 (EXP_MAT -> PARAMETRO OP_MAT EXP_MAT .)
    ID              reduce using rule 48 (EXP_MAT -> PARAMETRO OP_MAT EXP_MAT .)
    WHILE           reduce using rule 48 (EXP_MAT -> PARAMETRO OP_MAT EXP_MAT .)
    IF              reduce using rule 48 (EXP_MAT -> PARAMETRO OP_MAT EXP_MAT .)
    WRITE           reduce using rule 48 (EXP_MAT -> PARAMETRO OP_MAT EXP_MAT .)
    READ            reduce using rule 48 (EXP_MAT -> PARAMETRO OP_MAT EXP_MAT .)
    THEN            reduce using rule 48 (EXP_MAT -> PARAMETRO OP_MAT EXP_MAT .)
    SEMICOLON       reduce using rule 48 (EXP_MAT -> PARAMETRO OP_MAT EXP_MAT .)
    END             reduce using rule 48 (EXP_MAT -> PARAMETRO OP_MAT EXP_MAT .)
    ELSE            reduce using rule 48 (EXP_MAT -> PARAMETRO OP_MAT EXP_MAT .)


state 100

    (38) COMANDO -> IF EXP_LOGICA THEN BLOCO . SIN_ELSE
    (41) SIN_ELSE -> . ELSE BLOCO
    (42) SIN_ELSE -> . empty
    (64) empty -> .

  ! shift/reduce conflict for ELSE resolved as shift
    ELSE            shift and go to state 115
    SEMICOLON       reduce using rule 64 (empty -> .)
    END             reduce using rule 64 (empty -> .)

  ! ELSE            [ reduce using rule 64 (empty -> .) ]

    SIN_ELSE                       shift and go to state 114
    empty                          shift and go to state 116

state 101

    (27) FUNCAO -> FUNCTION NOME_FUNCAO BLOCO_FUNCAO .

    FUNCTION        reduce using rule 27 (FUNCAO -> FUNCTION NOME_FUNCAO BLOCO_FUNCAO .)
    BEGIN           reduce using rule 27 (FUNCAO -> FUNCTION NOME_FUNCAO BLOCO_FUNCAO .)


state 102

    (31) BLOCO_FUNCAO -> DEF_VAR . BEGIN COMANDO LISTA_COM END

    BEGIN           shift and go to state 117


state 103

    (28) NOME_FUNCAO -> ID PARAM_FUNC . COLON TIPO_DADO

    COLON           shift and go to state 118


state 104

    (29) PARAM_FUNC -> LPAREN . CAMPOS RPAREN
    (19) CAMPOS -> . ID COLON TIPO_DADO LISTA_CAMPOS

    ID              shift and go to state 111

    CAMPOS                         shift and go to state 119

state 105

    (30) PARAM_FUNC -> empty .

    COLON           reduce using rule 30 (PARAM_FUNC -> empty .)


state 106

    (16) VARIAVEL -> VAR ID LISTA_ID COLON . TIPO_DADO SEMICOLON
    (22) TIPO_DADO -> . INTEGER
    (23) TIPO_DADO -> . REAL
    (24) TIPO_DADO -> . ARRAY LBRACKETS NUMERO RBRACKETS OF TIPO_DADO
    (25) TIPO_DADO -> . RECORD CAMPOS END
    (26) TIPO_DADO -> . ID

    INTEGER         shift and go to state 86
    REAL            shift and go to state 87
    ARRAY           shift and go to state 88
    RECORD          shift and go to state 89
    ID              shift and go to state 84

    TIPO_DADO                      shift and go to state 120

state 107

    (17) LISTA_ID -> COMMA ID . LISTA_ID
    (17) LISTA_ID -> . COMMA ID LISTA_ID
    (18) LISTA_ID -> . empty
    (64) empty -> .

    COMMA           shift and go to state 82
    COLON           reduce using rule 64 (empty -> .)

    LISTA_ID                       shift and go to state 121
    empty                          shift and go to state 83

state 108

    (15) TIPO -> TYPE ID EQUAL TIPO_DADO SEMICOLON .

    TYPE            reduce using rule 15 (TIPO -> TYPE ID EQUAL TIPO_DADO SEMICOLON .)
    VAR             reduce using rule 15 (TIPO -> TYPE ID EQUAL TIPO_DADO SEMICOLON .)
    FUNCTION        reduce using rule 15 (TIPO -> TYPE ID EQUAL TIPO_DADO SEMICOLON .)
    BEGIN           reduce using rule 15 (TIPO -> TYPE ID EQUAL TIPO_DADO SEMICOLON .)


state 109

    (24) TIPO_DADO -> ARRAY LBRACKETS . NUMERO RBRACKETS OF TIPO_DADO

    NUMERO          shift and go to state 122


state 110

    (25) TIPO_DADO -> RECORD CAMPOS . END

    END             shift and go to state 123


state 111

    (19) CAMPOS -> ID . COLON TIPO_DADO LISTA_CAMPOS

    COLON           shift and go to state 124


state 112

    (43) LISTA_PARAM -> PARAMETRO COMMA LISTA_PARAM .

    RPAREN          reduce using rule 43 (LISTA_PARAM -> PARAMETRO COMMA LISTA_PARAM .)


state 113

    (34) BLOCO -> BEGIN COMANDO LISTA_COM . END

    END             shift and go to state 125


state 114

    (38) COMANDO -> IF EXP_LOGICA THEN BLOCO SIN_ELSE .

    SEMICOLON       reduce using rule 38 (COMANDO -> IF EXP_LOGICA THEN BLOCO SIN_ELSE .)
    END             reduce using rule 38 (COMANDO -> IF EXP_LOGICA THEN BLOCO SIN_ELSE .)
    ELSE            reduce using rule 38 (COMANDO -> IF EXP_LOGICA THEN BLOCO SIN_ELSE .)


state 115

    (41) SIN_ELSE -> ELSE . BLOCO
    (34) BLOCO -> . BEGIN COMANDO LISTA_COM END
    (35) BLOCO -> . COMANDO
    (36) COMANDO -> . ID NOME ASSIGN EXP_MAT
    (37) COMANDO -> . WHILE EXP_LOGICA BLOCO
    (38) COMANDO -> . IF EXP_LOGICA THEN BLOCO SIN_ELSE
    (39) COMANDO -> . WRITE CONST_VALOR
    (40) COMANDO -> . READ ID NOME

    BEGIN           shift and go to state 63
    ID              shift and go to state 16
    WHILE           shift and go to state 17
    IF              shift and go to state 18
    WRITE           shift and go to state 19
    READ            shift and go to state 20

    BLOCO                          shift and go to state 126
    COMANDO                        shift and go to state 64

state 116

    (42) SIN_ELSE -> empty .

    SEMICOLON       reduce using rule 42 (SIN_ELSE -> empty .)
    END             reduce using rule 42 (SIN_ELSE -> empty .)
    ELSE            reduce using rule 42 (SIN_ELSE -> empty .)


state 117

    (31) BLOCO_FUNCAO -> DEF_VAR BEGIN . COMANDO LISTA_COM END
    (36) COMANDO -> . ID NOME ASSIGN EXP_MAT
    (37) COMANDO -> . WHILE EXP_LOGICA BLOCO
    (38) COMANDO -> . IF EXP_LOGICA THEN BLOCO SIN_ELSE
    (39) COMANDO -> . WRITE CONST_VALOR
    (40) COMANDO -> . READ ID NOME

    ID              shift and go to state 16
    WHILE           shift and go to state 17
    IF              shift and go to state 18
    WRITE           shift and go to state 19
    READ            shift and go to state 20

    COMANDO                        shift and go to state 127

state 118

    (28) NOME_FUNCAO -> ID PARAM_FUNC COLON . TIPO_DADO
    (22) TIPO_DADO -> . INTEGER
    (23) TIPO_DADO -> . REAL
    (24) TIPO_DADO -> . ARRAY LBRACKETS NUMERO RBRACKETS OF TIPO_DADO
    (25) TIPO_DADO -> . RECORD CAMPOS END
    (26) TIPO_DADO -> . ID

    INTEGER         shift and go to state 86
    REAL            shift and go to state 87
    ARRAY           shift and go to state 88
    RECORD          shift and go to state 89
    ID              shift and go to state 84

    TIPO_DADO                      shift and go to state 128

state 119

    (29) PARAM_FUNC -> LPAREN CAMPOS . RPAREN

    RPAREN          shift and go to state 129


state 120

    (16) VARIAVEL -> VAR ID LISTA_ID COLON TIPO_DADO . SEMICOLON

    SEMICOLON       shift and go to state 130


state 121

    (17) LISTA_ID -> COMMA ID LISTA_ID .

    COLON           reduce using rule 17 (LISTA_ID -> COMMA ID LISTA_ID .)


state 122

    (24) TIPO_DADO -> ARRAY LBRACKETS NUMERO . RBRACKETS OF TIPO_DADO

    RBRACKETS       shift and go to state 131


state 123

    (25) TIPO_DADO -> RECORD CAMPOS END .

    SEMICOLON       reduce using rule 25 (TIPO_DADO -> RECORD CAMPOS END .)
    VAR             reduce using rule 25 (TIPO_DADO -> RECORD CAMPOS END .)
    BEGIN           reduce using rule 25 (TIPO_DADO -> RECORD CAMPOS END .)
    END             reduce using rule 25 (TIPO_DADO -> RECORD CAMPOS END .)
    RPAREN          reduce using rule 25 (TIPO_DADO -> RECORD CAMPOS END .)


state 124

    (19) CAMPOS -> ID COLON . TIPO_DADO LISTA_CAMPOS
    (22) TIPO_DADO -> . INTEGER
    (23) TIPO_DADO -> . REAL
    (24) TIPO_DADO -> . ARRAY LBRACKETS NUMERO RBRACKETS OF TIPO_DADO
    (25) TIPO_DADO -> . RECORD CAMPOS END
    (26) TIPO_DADO -> . ID

    INTEGER         shift and go to state 86
    REAL            shift and go to state 87
    ARRAY           shift and go to state 88
    RECORD          shift and go to state 89
    ID              shift and go to state 84

    TIPO_DADO                      shift and go to state 132

state 125

    (34) BLOCO -> BEGIN COMANDO LISTA_COM END .

    SEMICOLON       reduce using rule 34 (BLOCO -> BEGIN COMANDO LISTA_COM END .)
    END             reduce using rule 34 (BLOCO -> BEGIN COMANDO LISTA_COM END .)
    ELSE            reduce using rule 34 (BLOCO -> BEGIN COMANDO LISTA_COM END .)


state 126

    (41) SIN_ELSE -> ELSE BLOCO .

    SEMICOLON       reduce using rule 41 (SIN_ELSE -> ELSE BLOCO .)
    END             reduce using rule 41 (SIN_ELSE -> ELSE BLOCO .)
    ELSE            reduce using rule 41 (SIN_ELSE -> ELSE BLOCO .)


state 127

    (31) BLOCO_FUNCAO -> DEF_VAR BEGIN COMANDO . LISTA_COM END
    (32) LISTA_COM -> . SEMICOLON COMANDO LISTA_COM
    (33) LISTA_COM -> . empty
    (64) empty -> .

    SEMICOLON       shift and go to state 29
    END             reduce using rule 64 (empty -> .)

    LISTA_COM                      shift and go to state 133
    empty                          shift and go to state 30

state 128

    (28) NOME_FUNCAO -> ID PARAM_FUNC COLON TIPO_DADO .

    VAR             reduce using rule 28 (NOME_FUNCAO -> ID PARAM_FUNC COLON TIPO_DADO .)
    BEGIN           reduce using rule 28 (NOME_FUNCAO -> ID PARAM_FUNC COLON TIPO_DADO .)


state 129

    (29) PARAM_FUNC -> LPAREN CAMPOS RPAREN .

    COLON           reduce using rule 29 (PARAM_FUNC -> LPAREN CAMPOS RPAREN .)


state 130

    (16) VARIAVEL -> VAR ID LISTA_ID COLON TIPO_DADO SEMICOLON .

    VAR             reduce using rule 16 (VARIAVEL -> VAR ID LISTA_ID COLON TIPO_DADO SEMICOLON .)
    FUNCTION        reduce using rule 16 (VARIAVEL -> VAR ID LISTA_ID COLON TIPO_DADO SEMICOLON .)
    BEGIN           reduce using rule 16 (VARIAVEL -> VAR ID LISTA_ID COLON TIPO_DADO SEMICOLON .)


state 131

    (24) TIPO_DADO -> ARRAY LBRACKETS NUMERO RBRACKETS . OF TIPO_DADO

    OF              shift and go to state 134


state 132

    (19) CAMPOS -> ID COLON TIPO_DADO . LISTA_CAMPOS
    (20) LISTA_CAMPOS -> . SEMICOLON CAMPOS LISTA_CAMPOS
    (21) LISTA_CAMPOS -> . empty
    (64) empty -> .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 136
    END             reduce using rule 64 (empty -> .)
    RPAREN          reduce using rule 64 (empty -> .)

  ! SEMICOLON       [ reduce using rule 64 (empty -> .) ]

    LISTA_CAMPOS                   shift and go to state 135
    empty                          shift and go to state 137

state 133

    (31) BLOCO_FUNCAO -> DEF_VAR BEGIN COMANDO LISTA_COM . END

    END             shift and go to state 138


state 134

    (24) TIPO_DADO -> ARRAY LBRACKETS NUMERO RBRACKETS OF . TIPO_DADO
    (22) TIPO_DADO -> . INTEGER
    (23) TIPO_DADO -> . REAL
    (24) TIPO_DADO -> . ARRAY LBRACKETS NUMERO RBRACKETS OF TIPO_DADO
    (25) TIPO_DADO -> . RECORD CAMPOS END
    (26) TIPO_DADO -> . ID

    INTEGER         shift and go to state 86
    REAL            shift and go to state 87
    ARRAY           shift and go to state 88
    RECORD          shift and go to state 89
    ID              shift and go to state 84

    TIPO_DADO                      shift and go to state 139

state 135

    (19) CAMPOS -> ID COLON TIPO_DADO LISTA_CAMPOS .

    END             reduce using rule 19 (CAMPOS -> ID COLON TIPO_DADO LISTA_CAMPOS .)
    RPAREN          reduce using rule 19 (CAMPOS -> ID COLON TIPO_DADO LISTA_CAMPOS .)
    SEMICOLON       reduce using rule 19 (CAMPOS -> ID COLON TIPO_DADO LISTA_CAMPOS .)


state 136

    (20) LISTA_CAMPOS -> SEMICOLON . CAMPOS LISTA_CAMPOS
    (19) CAMPOS -> . ID COLON TIPO_DADO LISTA_CAMPOS

    ID              shift and go to state 111

    CAMPOS                         shift and go to state 140

state 137

    (21) LISTA_CAMPOS -> empty .

    SEMICOLON       reduce using rule 21 (LISTA_CAMPOS -> empty .)
    END             reduce using rule 21 (LISTA_CAMPOS -> empty .)
    RPAREN          reduce using rule 21 (LISTA_CAMPOS -> empty .)


state 138

    (31) BLOCO_FUNCAO -> DEF_VAR BEGIN COMANDO LISTA_COM END .

    FUNCTION        reduce using rule 31 (BLOCO_FUNCAO -> DEF_VAR BEGIN COMANDO LISTA_COM END .)
    BEGIN           reduce using rule 31 (BLOCO_FUNCAO -> DEF_VAR BEGIN COMANDO LISTA_COM END .)


state 139

    (24) TIPO_DADO -> ARRAY LBRACKETS NUMERO RBRACKETS OF TIPO_DADO .

    SEMICOLON       reduce using rule 24 (TIPO_DADO -> ARRAY LBRACKETS NUMERO RBRACKETS OF TIPO_DADO .)
    VAR             reduce using rule 24 (TIPO_DADO -> ARRAY LBRACKETS NUMERO RBRACKETS OF TIPO_DADO .)
    BEGIN           reduce using rule 24 (TIPO_DADO -> ARRAY LBRACKETS NUMERO RBRACKETS OF TIPO_DADO .)
    END             reduce using rule 24 (TIPO_DADO -> ARRAY LBRACKETS NUMERO RBRACKETS OF TIPO_DADO .)
    RPAREN          reduce using rule 24 (TIPO_DADO -> ARRAY LBRACKETS NUMERO RBRACKETS OF TIPO_DADO .)


state 140

    (20) LISTA_CAMPOS -> SEMICOLON CAMPOS . LISTA_CAMPOS
    (20) LISTA_CAMPOS -> . SEMICOLON CAMPOS LISTA_CAMPOS
    (21) LISTA_CAMPOS -> . empty
    (64) empty -> .

  ! shift/reduce conflict for SEMICOLON resolved as shift
    SEMICOLON       shift and go to state 136
    END             reduce using rule 64 (empty -> .)
    RPAREN          reduce using rule 64 (empty -> .)

  ! SEMICOLON       [ reduce using rule 64 (empty -> .) ]

    LISTA_CAMPOS                   shift and go to state 141
    empty                          shift and go to state 137

state 141

    (20) LISTA_CAMPOS -> SEMICOLON CAMPOS LISTA_CAMPOS .

    SEMICOLON       reduce using rule 20 (LISTA_CAMPOS -> SEMICOLON CAMPOS LISTA_CAMPOS .)
    END             reduce using rule 20 (LISTA_CAMPOS -> SEMICOLON CAMPOS LISTA_CAMPOS .)
    RPAREN          reduce using rule 20 (LISTA_CAMPOS -> SEMICOLON CAMPOS LISTA_CAMPOS .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 100 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 132 resolved as shift
WARNING: shift/reduce conflict for SEMICOLON in state 140 resolved as shift
